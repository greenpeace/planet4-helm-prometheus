---
prometheus:
  service:
    additionalPorts:
      - name: thanos-grpc
        protocol: TCP
        port: 10901
  prometheusSpec:
    additionalAlertManagerConfigs:
      - scheme: https
        tls_config:
          ca_file: /certs/cacerts.pem
          cert_file: /certs/tls.crt
          key_file: /certs/tls.key
          server_name: "alertmanager-it-operations-cluster.greenpeace.net"
        static_configs:
          - targets:
              - "alertmanager-it-operations-cluster.greenpeace.net"
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 30Gi
          selector: {}
    volumes:
      - name: certs
        secret:
          secretName: thanos-tls
    volumeMounts:
      - name: certs
        mountPath: "/certs"
        readOnly: true
    retention: 10d
    externalLabels:
      environment: test
      type: cluster
      entity: planet4
      name: planet4-dev
      location: gcp
      network: vpc
    thanos:
      version: v0.18.0
      objectStorageConfig:
        name: thanos-key
        key: objstore.yml
  thanosIngress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: GRPC
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/grpc-backend: 'true'
      nginx.ingress.kubernetes.io/protocol: h2c
      nginx.ingress.kubernetes.io/proxy-read-timeout: '160'
      nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
      nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
      nginx.ingress.kubernetes.io/auth-tls-secret: "kube-system/thanos-tls"
prometheusOperator:
  createCustomResource: false
  admissionWebhooks:
    enabled: false
    patch:
      enabled: false
  tlsProxy:
    enabled: false
grafana:
  persistence:
    enabled: true
  # storageClassName: default
  accessModes:
    - ReadWriteOnce
  size: 10Gi
alertmanager:
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: ${SLACK_WEB_API}
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
        - match:
          alertname: Watchdog
          receiver: 'null'
        - receiver: 'slack-notifications'
          continue: true
    receivers:
      - name: 'null'
      - name: 'slack-notifications'
        slack_configs:
          - channel: p4-infra-test
            title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}: \
            {{ .Alerts.Firing | len }}{{ end }}] Test'
            text: >-
              {{ range .Alerts }}
                *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
              {{ end }}
            send_resolved: true
